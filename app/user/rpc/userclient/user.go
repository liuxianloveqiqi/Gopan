// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"Gopan/app/user/rpc/types/user"
	"context"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommonResp   = user.CommonResp
	LoginReq     = user.LoginReq
	RegisterReq  = user.RegisterReq
	Result       = user.Result
	SearchResp   = user.SearchResp
	SendCodeReq  = user.SendCodeReq
	SendCodeResp = user.SendCodeResp
	UserInfo     = user.User
	UserInfoReq  = user.UserInfoReq
	UserList     = user.UserList

	User interface {
		SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*CommonResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*CommonResp, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserList, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SendCode(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserList, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}
