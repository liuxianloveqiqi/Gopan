// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"gorm.io/gorm"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFileFieldNames          = builder.RawFieldNames(&UserFile{})
	userFileRows                = strings.Join(userFileFieldNames, ",")
	userFileRowsExpectAutoSet   = strings.Join(stringx.Remove(userFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userFileRowsWithPlaceHolder = strings.Join(stringx.Remove(userFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserFileIdPrefix               = "cache:userFile:id:"
	cacheUserFileUserNameFileSha1Prefix = "cache:userFile:userName:fileSha1:"
)

type (
	userFileModel interface {
		Insert(ctx context.Context, data *UserFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserFile, error)
		FindOneByUserNameFileSha1(ctx context.Context, userName string, fileSha1 string) (*UserFile, error)
		Update(ctx context.Context, data *UserFile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserFileModel struct {
		sqlc.CachedConn
		table string
	}

	UserFile struct {
		gorm.Model
		Id         int64          `gorm:"column:id;primaryKey" db:"id"`
		UserName   string         `gorm:"column:user_name" db:"user_name"`
		FileSha1   string         `gorm:"column:file_sha1" db:"file_sha1"`
		FileSize   int64          `gorm:"column:file_size" db:"file_size"`
		FileName   string         `gorm:"column:file_name" db:"file_name"`
		CreateTime time.Time      `gorm:"column:create_time" db:"create_time"`
		UpdateTime time.Time      `gorm:"column:update_time" db:"update_time"`
		DeleteTime gorm.DeletedAt `gorm:"index " db:"delete_time"`
		Status     int64          `gorm:"column:status" db:"status"`
	}
)

func newUserFileModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserFileModel {
	return &defaultUserFileModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_file`",
	}
}

func (m *defaultUserFileModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userFileIdKey := fmt.Sprintf("%s%v", cacheUserFileIdPrefix, id)
	userFileUserNameFileSha1Key := fmt.Sprintf("%s%v:%v", cacheUserFileUserNameFileSha1Prefix, data.UserName, data.FileSha1)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userFileIdKey, userFileUserNameFileSha1Key)
	return err
}

func (m *defaultUserFileModel) FindOne(ctx context.Context, id int64) (*UserFile, error) {
	userFileIdKey := fmt.Sprintf("%s%v", cacheUserFileIdPrefix, id)
	var resp UserFile
	err := m.QueryRowCtx(ctx, &resp, userFileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFileRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFileModel) FindOneByUserNameFileSha1(ctx context.Context, userName string, fileSha1 string) (*UserFile, error) {
	userFileUserNameFileSha1Key := fmt.Sprintf("%s%v:%v", cacheUserFileUserNameFileSha1Prefix, userName, fileSha1)
	var resp UserFile
	err := m.QueryRowIndexCtx(ctx, &resp, userFileUserNameFileSha1Key, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_name` = ? and `file_sha1` = ? limit 1", userFileRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userName, fileSha1); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFileModel) Insert(ctx context.Context, data *UserFile) (sql.Result, error) {
	userFileIdKey := fmt.Sprintf("%s%v", cacheUserFileIdPrefix, data.Id)
	userFileUserNameFileSha1Key := fmt.Sprintf("%s%v:%v", cacheUserFileUserNameFileSha1Prefix, data.UserName, data.FileSha1)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, userFileRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserName, data.FileSha1, data.FileSize, data.FileName, data.DeleteTime, data.Status)
	}, userFileIdKey, userFileUserNameFileSha1Key)
	return ret, err
}

func (m *defaultUserFileModel) Update(ctx context.Context, newData *UserFile) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userFileIdKey := fmt.Sprintf("%s%v", cacheUserFileIdPrefix, data.Id)
	userFileUserNameFileSha1Key := fmt.Sprintf("%s%v:%v", cacheUserFileUserNameFileSha1Prefix, data.UserName, data.FileSha1)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userFileRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserName, newData.FileSha1, newData.FileSize, newData.FileName, newData.DeleteTime, newData.Status, newData.Id)
	}, userFileIdKey, userFileUserNameFileSha1Key)
	return err
}

func (m *defaultUserFileModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserFileIdPrefix, primary)
}

func (m *defaultUserFileModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFileRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserFileModel) tableName() string {
	return m.table
}
