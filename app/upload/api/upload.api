syntax = "v1"  // 版本号

// 接口信息
info(
	title: "Gopan/upload.api"
	author: "liuxian"
	version: "1.0.0"
)
type (
	// 上传文件
	FileUploadReq {
		// 上传文件的存储类型
		CurrentStoreType int64 `form:"currentStoreType" validate:"required,in=1|2|3|4|5"`
	}
	// 秒转接口
	TryFastUploadReq {
		FileSha1 string `json:"fileSha1"`
	}
	// 初始化分块上传
	InitialMultipartUploadReq {
		FileSha1 string `json:"fileSha1"`
		FileSize int64  `json:"fileSize"`
	}
	InitialMultipartUploadResp {
		UserId     int64  `json:"userId"`
		FileSha1   string `json:"fileSha1"`
		FileSize   int64  `json:"fileSize"`
		UploadID   string `json:"uploadId"`
		ChunkSize  int64  `json:"chunkSize"`
		ChunkCount int64  `json:"chunkCount"`
	}
	// 上传分块的文件
	UploadPartReq {
		UploadID   string `json:"uploadId"`
		ChunkIndex int64  `json:"chunkIndex"`
	}

   // 合并分块的文件
	CompleteUpload{
		FileSha1   string `json:"fileSha1"`
		FileSize   int64  `json:"fileSize"`
		UploadID   string `json:"uploadId"`
		ChunkSize  int64  `json:"chunkSize"`
	}
)

@server(
	middleware: JWT // 路由中间件声明
	prefix: file
)
service upload-api {
	@doc(
		summary: "上传文件"
	)
	@handler fileUpload
	post /upload (FileUploadReq) returns ()
	
	@doc(
		summary: "秒传文件"
	)
	@handler tryFastFileUpload
	post /fastupload (TryFastUploadReq) returns ()
	
	@doc(
		summary: "初始化分块上传文件"
	)
	@handler initialMultipartUpload
	post /multipartupload/init (InitialMultipartUploadReq) returns (InitialMultipartUploadResp)
	
	@doc(
		summary: "上传分块文件"
	)
	@handler uploadPartReq
	post /multipartupload/uploadpart (UploadPartReq) returns ()
}