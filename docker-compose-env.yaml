version: '3.5'
# 网络配置
networks:
  gopan:
    driver: bridge

# 服务容器配置
services:
  # Traefik网关
  traefik:
    image: traefik:v2.4
    command:
      - "--providers.docker=true"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.gopan.address=:3020"
      - "--api=true"  # 启用Traefik的API
      - "--api.insecure=true"# 启用Traefik的Web UI
      - "--providers.docker"
    ports:
      - "8070:8080"  # Traefik dashboard
      - "3020:3020"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - gopan
  #jaeger链路追踪 — Jaeger for tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: always
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - LOG_LEVEL=debug
    networks:
      - gopan

  #prometheus监控 — Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: prometheus
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    volumes:
      - ./deploy/prometheus/server/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: always
    user: root
    ports:
      - 9090:9090
    networks:
      - gopan

  #查看prometheus监控数据 - Grafana to view Prometheus monitoring data
  grafana:
    image: grafana/grafana:8.0.6
    container_name: grafana
    hostname: grafana
    user: root
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    restart: always
    volumes:
      - ./data/grafana/data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - gopan
  #  #搜集kafka业务日志、存储prometheus监控数据 - Kafka for collecting business logs and storing Prometheus monitoring data
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
    container_name: elasticsearch
    user: root
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=Asia/Shanghai
    volumes:
      - ./data/elasticsearch/data:/usr/share/elasticsearch/data
    restart: always
    ports:
      - "9201:9200"
      - "9300:9300"
    networks:
      - gopan

  #查看elasticsearch数据 - Kibana to view Elasticsearch data
  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.4
    container_name: kibana
    environment:
      - elasticsearch.hosts=http://elasticsearch:9200
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - gopan
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  #消费kafka中filebeat收集的数据输出到es - The data output collected by FileBeat in Kafka is output to ES
  go-stash:
   # image: kevinwan/go-stash:1.0 # if you "macOs intel" or "linux amd"
    image: kevinwan/go-stash:1.0-arm64 #  if you "macOs m1" or "linux arm"
    container_name: go-stash
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    user: root
    restart: always
    volumes:
      - ./deploy/go-stash/etc:/app/etc
    networks:
      - gopan
    depends_on:
      - elasticsearch
      - kafka

  #收集业务数据 - Collect business data
  filebeat:
    image: elastic/filebeat:7.13.4
    container_name: filebeat
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    user: root
    restart: always
    entrypoint: "filebeat -e -strict.perms=false"  #解决配置文件权限问题 - Solving the configuration file.sql permissions
    volumes:
      - ./deploy/filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml
      # 此处需指定docker的containers目录，取决于你docker的配置 - The containers directory of docker needs to be specified here, depending on your docker configuration
      # 如snap安装的docker，则为/var/snap/docker/common/var-lib-docker/containers - Example if docker is installed by Snap /var/snap/docker/common/var-lib-docker/containers
      # - /var/snap/docker/common/var-lib-docker/containers:/var/lib/docker/containers
      - /var/lib/docker/containers:/var/lib/docker/containers
    networks:
      - gopan
    depends_on:
      - kafka


  #zookeeper是kafka的依赖 - Zookeeper is the dependencies of Kafka
  zookeeper:
    container_name: zookeeper
    build:
      context: deploy/zookeeper
    environment:
      - TZ=Asia/Shanghai
    privileged: true
    networks:
      - gopan
    ports:
      - "2181:2181"
    restart: always

  #消息队列 - Message queue
  kafka:
    build:
      context: deploy/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - TZ=Asia/Shanghai
      - ALLOW_PLAINTEXT_LISTENER=yes
    restart: always
    privileged: true
    networks:
      - gopan
    depends_on:
      - zookeeper
## 映射mac docker容器位置
  nsenter1:
    image: justincormack/nsenter1
    privileged: true
    pid: host

  user-rpc: # 自定义容器名称
    image: liuxian123/gopan-user-rpc:latest
    build:
      dockerfile: ./app/user/rpc/Dockerfile
    container_name: gopan-user-rpc

    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    ports: # 设置端口映射
      - "3002:3002"  # user服务rpc端口
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gopan
    restart: always                      # 指定容器退出后的重启策略为始终重启

  user-api: # 自定义容器名称
    image: liuxian123/gopan-user-api:latest
    build:
      dockerfile: ./app/user/api/Dockerfile
#    container_name: gopan-user-api
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
#    ports: # 设置端口映射
#      - "3001:3001"  # user服务api端口
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gopan
    restart: always                      # 指定容器退出后的重启策略为始终重启
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gopan-user-api.rule=Host(`gopan`) && PathPrefix(`/account`)" # 转发规则
      - "traefik.http.routers.gopan-user-api.entrypoints=gopan"
      - "traefik.http.services.gopan-user-api.loadbalancer.server.port=3001"    # 实例的端口
      - "traefik.docker.network=gopan"
      - "traefik.http.services.gopan-user-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.gopan-user-api.loadbalancer.passhostheader=true"
    deploy:
      replicas: 3 # 启动三个实例

  transfer: # 自定义容器名称
    image: liuxian123/gopan-transfer:latest
    build:
      dockerfile: ./app/transfer/rmq/Dockerfile
    container_name: gopan-transfer
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gopan
    restart: always                      # 指定容器退出后的重启策略为始终重启

  upload-api: # 自定义容器名称
    image: liuxian123/gopan-upload-api:latest
    build:
      dockerfile: ./app/upload/api/Dockerfile
#    container_name: gopan-upload-api
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
#    ports: # 设置端口映射
#      - "3003:3003"  # upload服务api端口
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gopan
    restart: always                      # 指定容器退出后的重启策略为始终重启
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gopan-upload-api.rule=Host(`gopan`) && PathPrefix(`/file/upload`)"
      - "traefik.http.routers.gopan-upload-api.entrypoints=gopan"
      - "traefik.http.services.gopan-upload-api.loadbalancer.server.port=3003"
      - "traefik.docker.network=gopan"
      - "traefik.http.services.gopan-upload-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.gopan-upload-api.loadbalancer.passhostheader=true"
    deploy:
      replicas: 3 # 启动三个实例

  upload-rpc: # 自定义容器名称
    image: liuxian123/gopan-upload-rpc:latest
    build:
      dockerfile: ./app/upload/rpc/Dockerfile
    container_name: gopan-upload-rpc
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    ports: # 设置端口映射
      - "3004:3004"  # upload服务rpc端口
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gopan
    restart: always                      # 指定容器退出后的重启策略为始终重启

  download-api: # 自定义容器名称
    image: liuxian123/gopan-download-api:latest
    build:
      dockerfile: ./app/download/api/Dockerfile
    container_name: gopan-download-api
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    ports: # 设置端口映射
      - "3005:3005"  # download服务api端口
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gopan
    restart: always                      # 指定容器退出后的重启策略为始终重启
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gopan-download-api.rule=Host(`gopan`) && PathPrefix(`/file/download`)"
      - "traefik.http.routers.gopan-download-api.entrypoints=gopan"
      - "traefik.http.services.gopan-download-api.loadbalancer.server.port=3005"
      - "traefik.docker.network=gopan"
      - "traefik.http.services.gopan-download-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.gopan-download-api.loadbalancer.passhostheader=true"
    deploy:
      replicas: 3 # 启动三个实例

  filemeta-api: # 自定义容器名称
    image: liuxian123/gopan-filemeta-api:latest
    build:
      dockerfile: ./app/filemeta/api/Dockerfile
    #container_name: gopan-filemeta-api
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
#    ports: # 设置端口映射
#      - "3006:3006"  # filemeta服务api端口
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gopan
    restart: always                      # 指定容器退出后的重启策略为始终重启
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gopan-filemeta-api.rule=Host(`gopan`) && PathPrefix(`/filemeta`)"
      - "traefik.http.routers.gopan-filemeta-api.entrypoints=gopan"
      - "traefik.http.services.gopan-filemeta-api.loadbalancer.server.port=3006"
      - "traefik.docker.network=gopan"
      - "traefik.http.services.gopan-filemeta-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.gopan-filemeta-api.loadbalancer.passhostheader=true"
    deploy:
      replicas: 3 # 启动三个实例


  filemeta-rpc: # 自定义容器名称
    image: ${DOCKER_USERNAME}/gopan-filemeta-rpc:latest

    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true

    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gopan
    restart: always                      # 指定容器退出后的重启策略为始终重启
    deploy:
      replicas: 3 # 启动三个实例